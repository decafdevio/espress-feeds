"use strict";
function Radiobox() {
    function drawSpan(lang, currentLang) {
        return '<span title="' + lang.t + '" class="b_lang' + (currentLang.s == lang.s ? " _current" : "") + '">' + lang.s + "</span>"
    }
    this.popupCountriesList = $("#popup_countries_list"),
    this.popupCountries = this.popupCountriesList.find("a"),
    this.popupLangsList = $("#popup_langs_list"),
    this.bodyWrapper = $("#bodyW"),
    this.loading = $("#loading"),
    this.currentTitle = window.document.title,
    this.ajaxViews = 0,
    this.languages = {
        en: {
            s: "ENG",
            t: "English"
        },
        ru: {
            s: "РУС",
            t: "Русский"
        },
        uk: {
            s: "УКР",
            t: "Українська"
        },
        es: {
            s: "ESP",
            t: "Español"
        },
        be: {
            s: "БЕЛ",
            t: "Беларускі"
        },
        de: {
            s: "DEU",
            t: "Deutsch"
        },
        pl: {
            s: "POL",
            t: "Polskie"
        },
        fr: {
            s: "FRA",
            t: "Français"
        }
    },
    this.getLangByCode = function(l) {
        l.toLowerCase();
        var lang = this.languages[l];
        if (lang)
            return lang;
        l = l.split("-");
        return this.languages[l[0]]
    },
    this.defaultLanguage = this.getLangByCode(window.navigator.userLanguage || window.navigator.language),
    console.log("init language " + (this.defaultLanguage ? this.defaultLanguage.t : "")),
    $("body").on("click", ".ajax", function(evt) {
        Radiobox.changePage($(this).attr("href"), $(this).attr("anchor")),
        evt.preventDefault()
    }),
    $("body").on("click", ".frequency_ajax", function(evt) {
        var currentlyPlays,
            played,
            setRadio = $(this).closest("div[role=dialog]");
        0 < setRadio.length && (console.log("Force remove modal"), setRadio.modal("hide"), $("body").removeClass("modal-open"), $(".modal-backdrop").remove()),
        Radiobox.currentStream && (played = $(this).closest("ul"), currentlyPlays = !1, 0 < played.length && played.find("button").each(function() {
            if ($(this).attr("radioid") == Radiobox.currentStream.radioId)
                return !(currentlyPlays = !0)
        }), !currentlyPlays || 0 < (setRadio = $(this).closest("li").find("button")).length && setRadio.attr("radioid") != Radiobox.currentStream.radioId && (played = Radiobox.topPlayButton.hasClass("b-stop"), Radiobox.setStreamByObj(setRadio), played && setRadio.click())),
        Radiobox.changePage($(this).attr("href")),
        evt.preventDefault()
    }),
    this.popupLangsList.on("click", "span", function() {
        $(this).parent().children("span").removeClass("_current"),
        $(this).addClass("_current")
    }),
    this.popupCountriesList.on("click", "a", function(event) {
        event.preventDefault(),
        Radiobox.popupCountries.removeClass("_current"),
        $(this).addClass("_current");
        for (var langs = $(this).attr("langs").split(" "), langsSpan = "", setLangs = {}, currentLang = Radiobox.getLangByCode(Radiobox.popupLangsList.attr("current")), i = 0; i < langs.length; i++) {
            var lang = Radiobox.getLangByCode(langs[i]);
            lang && (setLangs[lang.s] = 1, langsSpan += drawSpan(lang, currentLang))
        }
        Radiobox.defaultLanguage && !setLangs[Radiobox.defaultLanguage.s] && (langsSpan += drawSpan(Radiobox.defaultLanguage, currentLang), setLangs[Radiobox.defaultLanguage.s] = 1),
        setLangs[currentLang.s] || (langsSpan += drawSpan(currentLang, currentLang)),
        Radiobox.popupLangsList.html(langsSpan)
    }),
    $("#popup_set").click(function() {
        var setLang,
            key,
            url = Radiobox.popupCountries.filter("._current").attr("href"),
            langName = Radiobox.popupLangsList.find("._current").text();
        for (key in Radiobox.languages)
            if (Radiobox.languages[key].s == langName) {
                setLang = key;
                break
            }
        setLang && (window.location.href = url + "?lang=" + setLang)
    }),
    $("body").on("click", "#st_filter_apply", function(evt) {
        Radiobox.applyFilter(),
        evt.preventDefault()
    }),
    this.applyFilter = function() {
        var query = $("#st_filter").find("input"),
            hideCurrentCountry = 1,
            intStations = 0,
            langs = "";
        query.filter(":checked").each(function() {
            var id = $(this).attr("id");
            -1 != id.indexOf("stf_cur_country") ? hideCurrentCountry = 0 : -1 != id.indexOf("stf_int_stations") ? intStations = 1 : -1 != id.indexOf("stf_lang_") && (langs += id.substring(9) + ",")
        });
        query = Radiobox.replaceQuery({
            sf_langs: langs,
            sf_hide_cur: hideCurrentCountry,
            sf_int: intStations
        }, {
            p: ""
        });
        Radiobox.changePage(query)
    },
    this.replaceQuery = function(params, skipParams, currentUrl) {
        var hash = 1 < (hash = (currentUrl = currentUrl || window.location.href).split("#")).length ? (currentUrl = hash[0], "#" + hash[1]) : "";
        if ((currentUrl = currentUrl.split("?"))[1] && 0 < currentUrl[1].length)
            for (var currentParams = currentUrl[1].split("&"), i = 0; i < currentParams.length; i++) {
                var req_value = currentParams[i].split("=");
                0 != req_value[0].length && (req_value[0] in skipParams || req_value[0] in params || (params[req_value[0]] = decodeURIComponent(req_value[1]).replace(/\+/g, " ")))
            }
        var param,
            query = "";
        for (param in params)
            params[param] && (0 != query.length && (query += "&"), query += param + "=" + encodeURIComponent(params[param]));
        return console.log(query), currentUrl[0] + (0 < query.length ? "?" + query : "") + hash
    },
    this.updateAddThis = function() {
        window.addthis && window.addthis.layers && window.addthis.layers.refresh && window.addthis.layers.refresh()
    },
    this.changeCountry = function(country) {
        var ajaxURL = "/footer/" + country + "/?ajax=1";
        console.log("Ajax: " + ajaxURL),
        $.ajax({
            url: ajaxURL,
            dataType: "json"
        }).done(function(data) {
            $("#footer-section").html(data.data),
            window.currentCountry = country
        })
    },
    this.getPath = function(url) {
        var matches = url.match(/(?:http?\:\/\/[^/]+)?(\/[^?]*)/);
        return 2 == matches.length ? matches[1] : url
    },
    this.changePage = function(url, anchor, postData, updateOnly) {
        var ajaxURL = url.indexOf("#");
        -1 !== ajaxURL && (req = url.substring(ajaxURL), anchor = anchor || req, url = url.substring(0, ajaxURL)),
        url = Radiobox.addPlayerState(url),
        Radiobox.ajaxViews++;
        var req = "",
            ajaxURL = this.getLocation(),
            req = ajaxURL ? "tzLoc=" + encodeURIComponent(ajaxURL) : "tz=" + (new Date).getTimezoneOffset(),
            ajaxURL = url + (0 < url.indexOf("?") ? "&ajax=1" : "?ajax=1") + "&" + req;
        console.log("Ajax: " + ajaxURL, updateOnly),
        Radiobox.loading.modal("show");
        req = {
            url: ajaxURL,
            dataType: "json"
        };
        !postData && "" !== postData || (req.type = "post", req.data = postData, console.log("Post form: ", ajaxURL, postData)),
        $.ajax(req).done(function(data) {
            return Radiobox.loading.modal("hide"), updateOnly ? (Radiobox.bodyWrapper.html(data.data), Radiobox.updateAddThis()) : (Radiobox.pushHistoryState({
                state: "changePage",
                data: data.data
            }, data.title, url), anchor ? window.location.hash = anchor : window.scrollTo(0, 0), Radiobox.updateStationPlayButtons(), Radiobox.currentTitle = data.title, gtag("event", "pageview", {
                page: url,
                title: data.title
            }), gtag("event", "radioMainTracker.send", "pageview", {
                page: url,
                title: data.title
            }), gtag("event", "radioMainTracker2.send", "pageview", {
                page: url,
                title: data.title
            }), window.yaCounter32397750 && window.yaCounter32397750.hit(url, data.title), window.fusetag ? data.noads ? (window.noads = !0, window.fusetag.resetFuseSlots()) : (window.noads = !1, window.fusetag.pageInit()) : window.googletag && (data.noads ? (console.log("Google clear"), window.googletag.pubads().clear()) : (path = Radiobox.getPath(url), console.log("Google refresh: ", path), window.googletag.pubads().setTargeting("url", path), window.googletag.pubads().refresh())), data.country && window.currentCountry != data.country && Radiobox.changeCountry(data.country), Radiobox.euClosed && ($(".modal--cookies").addClass("display--flex").fadeTo("fast", 1), $(".modal--cookies-backdrop").show().fadeTo("fast", 1))), void Radiobox.bodyWrapper.trigger("changePage");
            var path
        }).fail(function() {
            Radiobox.loading.modal("hide"),
            alert("Internal server error. Please try again.")
        })
    },
    this.pushHistoryState = function(state, title, url) {
        document.title = title,
        window.history ? "changePage" == state.state ? window.history.pushState(state, title, url) : window.history.replaceState(window.history.state, title, url) : window.location.replace(url)
    },
    this.historyStateChange = function(state) {
        console.log(state),
        Radiobox.bodyWrapper.html(state.data),
        Radiobox.updateAddThis(),
        Radiobox.renderConnectedDevicesDate()
    },
    this.stationFavorite = function(radioId, ajaxURL) {
        ajaxURL = "/favorite/" + radioId + "/" + (ajaxURL ? "add" : "remove");
        console.log("StationFavorite: " + ajaxURL),
        $.ajax({
            url: ajaxURL,
            dataType: "json"
        }).done(function(data) {})
    },
    $("body").on("click", "button[bookmark]", function(elem) {
        var topClass = "b-favorite";
        $(this).hasClass("b-favorited") ? ($(this).removeClass("b-favorited"), $(this).addClass("b-favorite"), Radiobox.stationFavorite($(this).attr("bookmark"), !1)) : ($(this).removeClass("b-favorite"), $(this).addClass("b-favorited"), Radiobox.stationFavorite($(this).attr("bookmark"), !0), topClass = "b-favorited"),
        Radiobox.toogleBookmarkButtonTitle($(this)),
        Radiobox.currentStream && Radiobox.currentStream.radioId == $(this).attr("bookmark") && (Radiobox.topPlayerFavorite.attr("class", topClass), Radiobox.toogleTopPlayerFavoriteTitle())
    }),
    this.skippedStream = !1,
    this.bodyWrapper.on("click", "#addToFavouritesClose, #add_review_close", function() {
        Radiobox.currentStream && (Radiobox.skippedStream = Radiobox.currentStream.radioId)
    }),
    this.bodyWrapper.on("click", "#add_to_favourites_popup", function() {
        Radiobox.topPlayerFavorite.click()
    }),
    this.bodyWrapper.on("click", "#add_review_popup", function() {
        var url;
        Radiobox.currentStream && (Radiobox.skippedStream = Radiobox.currentStream.radioId, url = "/" + (url = Radiobox.currentStream.radioId).replace(".", "/", 1) + "/?cs=" + url, Radiobox.changePage(url, "review"))
    }),
    this.userId = 0,
    this.getUserId = function() {
        if (Radiobox.userId)
            return Radiobox.userId;
        var match = document.cookie.match(new RegExp("_ouid=([^;]+)"));
        return match && (Radiobox.userId = match[1]), Radiobox.userId
    },
    $("#player__promo__close").click(function() {
        $(".player__promo").fadeTo("fast", 0, function() {
            $(".player").removeClass("_promo")
        });
        var expires = new Date;
        expires.setTime(expires.getTime() + 5184e6),
        document.cookie = "sab=1;path=/;expires=" + expires.toUTCString(),
        this._showAppBanner = !1
    }),
    $(".promo-store-link").click(function() {
        $(".player__promo").fadeTo("fast", 0, function() {
            $(".player").removeClass("_promo")
        });
        var expires = new Date;
        expires.setTime(expires.getTime() + 31536e6),
        document.cookie = "sab=1;path=/;expires=" + expires.toUTCString(),
        this._showAppBanner = !1
    }),
    this._showAppBanner = -1 === document.cookie.indexOf("sab=1"),
    this.showAppBanner = function() {
        if (this._showAppBanner) {
            if (/(android)/i.test(navigator.userAgent))
                $("#banner-android-app-link").show();
            else {
                if (!/(iphone|ipad)/i.test(navigator.userAgent))
                    return;
                $("#banner-ios-app-link").show()
            }
            $(".player").addClass("_promo")
        }
    },
    this._isBannerShowedForRadioID = "",
    this._showPuzzles = -1 === document.cookie.indexOf("spg=1"),
    this._showMahjong = -1 === document.cookie.indexOf("smg=1"),
    this._showFavourite = -1 === document.cookie.indexOf("sfv=1"),
    this.showPuzzles = function(addToFavouritesPopup, alertPuzzlegarage, alertMahjong) {
        var expires = new Date;
        expires.setTime(expires.getTime() + 2592e6),
        document.cookie = "spg=1;path=/;expires=" + expires.toUTCString(),
        this._showPuzzles = !1,
        addToFavouritesPopup.collapse("hide"),
        alertMahjong.collapse("hide"),
        alertPuzzlegarage.collapse("show")
    },
    this.showMahjong = function(addToFavouritesPopup, alertPuzzlegarage, alertMahjong) {
        var expires = new Date;
        expires.setTime(expires.getTime() + 2592e6),
        document.cookie = "smg=1;path=/;expires=" + expires.toUTCString(),
        this._showMahjong = !1,
        addToFavouritesPopup.collapse("hide"),
        alertPuzzlegarage.collapse("hide"),
        alertMahjong.collapse("show")
    },
    this.showFavourite = function(addToFavouritesPopup, alertPuzzlegarage, alertMahjong) {
        var expires = new Date;
        expires.setTime(expires.getTime() + 864e5),
        document.cookie = "sfv=1;path=/;expires=" + expires.toUTCString(),
        this._showFavourite = !1,
        addToFavouritesPopup.find("b").html(Radiobox.currentStream.name),
        alertPuzzlegarage.collapse("hide"),
        alertMahjong.collapse("hide"),
        addToFavouritesPopup.collapse("show")
    },
    this.bodyWrapper.on("click", "#alert_puzzlegarage_close", function() {
        Radiobox._showPuzzles = !1
    }),
    this.bodyWrapper.on("click", "#alert_mahjong_close", function() {
        Radiobox._showMahjong = !1
    }),
    this.showAddFavouritesOrReviewPopup = function() {
        var addToFavouritesPopup,
            alertPuzzlegarage,
            alertMahjong,
            showFavourite,
            showMahjong,
            showPuzzle;
        Radiobox.currentStream && Radiobox._isBannerShowedForRadioID != Radiobox.currentStream.radioId && (Radiobox._isBannerShowedForRadioID = Radiobox.currentStream.radioId, addToFavouritesPopup = $("#addToFavouritesPopup"), alertPuzzlegarage = $("#alert_puzzlegarage"), alertMahjong = $("#alert_mahjong"), showPuzzle = 1e3 < window.screen.width, showFavourite = Radiobox._showFavourite && addToFavouritesPopup.length && "b-favorited" != Radiobox.topPlayerFavorite.attr("class"), showMahjong = (Math.random() < .5 || !Radiobox._showPuzzles) && Radiobox._showMahjong && showPuzzle && alertMahjong.length, showPuzzle = Radiobox._showPuzzles && showPuzzle && alertPuzzlegarage.length, showFavourite ? Radiobox.showFavourite(addToFavouritesPopup, alertPuzzlegarage, alertMahjong) : showMahjong ? Radiobox.showMahjong(addToFavouritesPopup, alertPuzzlegarage, alertMahjong) : showPuzzle && Radiobox.showPuzzles(addToFavouritesPopup, alertPuzzlegarage, alertMahjong))
    },
    $("#mahjong-1 img[data-mahjong]").css("opacity", 1),
    $(".alert--mahjong .list-previews__item").mouseover(function() {
        $(".alert--mahjong img[data-mahjong]").css("opacity", 0),
        $(this).find("img[data-mahjong]").css("opacity", 1)
    }),
    this.hideAddToFavouritesPopup = function() {
        var addToFavouritesPopup = $("#addToFavouritesPopup");
        addToFavouritesPopup.length && addToFavouritesPopup.collapse("hide")
    },
    this.hideAddReviewPopup = function() {
        var addReviewPopup = $("#alert_reviews");
        addReviewPopup.length && addReviewPopup.collapse("hide")
    },
    this.topPlayerFavorite = $("#top_player_favorite"),
    this.topPlayerFavorite.click(function() {
        var add;
        Radiobox.currentStream && (add = !1, "b-favorited" == $(this).attr("class") ? (Radiobox.stationFavorite(Radiobox.currentStream.radioId, !1), Radiobox.topPlayerFavorite.attr("class", "b-favorite")) : (Radiobox.stationFavorite(Radiobox.currentStream.radioId, !0), Radiobox.topPlayerFavorite.attr("class", "b-favorited"), add = !0), Radiobox.toogleTopPlayerFavoriteTitle(), $("body").find("button[bookmark='" + Radiobox.currentStream.radioId + "']").each(function() {
            add ? ($(this).addClass("_done b-favorited"), $(this).removeClass("b-favorite")) : ($(this).removeClass("_done b-favorited"), $(this).addClass("b-favorite")),
            Radiobox.toogleBookmarkButtonTitle($(this))
        }), Radiobox.hideAddToFavouritesPopup())
    }),
    this.toogleBookmarkButtonTitle = function($el) {
        var toggTitle = $el.attr("title");
        $el.attr("title", $el.attr("toggTitle")),
        $el.attr("toggTitle", toggTitle),
        $el.html($el.attr("like"))
    },
    this.toogleTopPlayerFavoriteTitle = function() {
        "b-favorited" === Radiobox.topPlayerFavorite.attr("class") ? Radiobox.topPlayerFavorite.attr("title", Radiobox.topPlayerFavorite.attr("remove_title")) : Radiobox.topPlayerFavorite.attr("title", Radiobox.topPlayerFavorite.attr("add_title"))
    },
    this.dayRecurs = [1, 2, 4, 8, 16, 32, 64],
    this.showProgram = function(hide) {
        var newLine = hide && hide.newLine,
            hide = hide && hide.hide,
            programTitle = Radiobox.topPlayerTitle.find("a.player__station__show");
        programTitle.length || (programTitle = $("<a>").attr("class", "player__station__show _a ajax")),
        Radiobox.topPlayerTitle.find("br").remove(),
        programTitle.attr("href", "").text(""),
        Radiobox.mediaControllChangeProgram(""),
        Radiobox.currentStream.radioHasProgram && !hide && Radiobox.programReq(function(currentProgramTitle) {
            for (var programs = currentProgramTitle.programs, now = new Date, currentProgram = null, i = 0; i < programs.length; i++) {
                for (var program = programs[i], s = 0; s < program.schedule.length; s++) {
                    var schedule = program.schedule[s],
                        nowMinutesUtc = Radiobox.dayRecurs[now.getUTCDay()];
                    if ((schedule.recurs & nowMinutesUtc) == nowMinutesUtc) {
                        var hoursStart = schedule.start / 1e4,
                            minsStart = (schedule.start - 1e4 * hoursStart) / 100,
                            nowHoursUtc = now.getUTCHours(),
                            nowMinutesUtc = now.getUTCMinutes();
                        if (3600 * (nowHoursUtc - hoursStart) + 60 * (nowMinutesUtc - minsStart) < schedule.duration && (hoursStart < nowHoursUtc || hoursStart == nowHoursUtc && minsStart <= nowMinutesUtc)) {
                            currentProgram = program;
                            break
                        }
                    }
                }
                if (currentProgram)
                    break
            }
            currentProgram && (currentProgramTitle = " — " + currentProgram.name, newLine && (Radiobox.topPlayerTrack.html(""), Radiobox.topPlayerTitle.append("<br>"), currentProgramTitle = currentProgram.name), Radiobox.topPlayerTitle.append(programTitle), programTitle.attr("href", currentProgram.link).text(currentProgramTitle), Radiobox.mediaControllChangeProgram(currentProgramTitle))
        })
    },
    this.programCache = {},
    this.programReq = function(callback) {
        var cacheData = Radiobox.currentStream.radioId.split(/\.(.+)/),
            url = "/json/" + cacheData[0] + "/" + cacheData[1] + "/program/",
            cacheData = Radiobox.programCache[url],
            timestamp = (new Date).getTime() / 1e3 | 0;
        if (cacheData && timestamp - cacheData.updated < 3600)
            return callback(cacheData.data);
        $.ajax({
            url: url
        }).done(function(data) {
            return Radiobox.programCache[url] = {
                data: data,
                updated: timestamp
            }, callback(data)
        })
    },
    this.topPlayerTitle = $("#top_player_title"),
    this.setStream = function(opts) {
        switch (Radiobox.currentStream = {
            radioId: opts.id,
            name: opts.name,
            geoBlocked: opts.geoBlocked,
            restricted: opts.restricted,
            instId: opts.instId,
            stopped: opts.stopped,
            userHasReview: opts.userHasReview,
            radioHasProgram: opts.radioHasProgram,
            listeners: opts.listeners
        }, opts.streamType) {
        case "mp3":
            Radiobox.currentStream.mp3 = opts.stream;
            break;
        case "m4a":
            Radiobox.currentStream.m4a = opts.stream;
            break;
        case "hls":
            Radiobox.currentStream.hls = opts.stream;
            break;
        case "mpd":
            Radiobox.currentStream.mpd = opts.stream;
            break;
        case "external":
            Radiobox.currentStream.external = opts.stream;
            break;
        case "":
            Radiobox.currentStream.stopped && (Radiobox.currentStream.stoppedTried = !0)
        }
        var href = opts.id.indexOf("."),
            ajaxClass = window.location.href.indexOf("?"),
            href = "/" + opts.id.substring(0, href) + "/" + opts.id.substring(href + 1) + "/" + (0 < ajaxClass ? window.location.href.substring(ajaxClass) : "");
        Radiobox.hideAddToFavouritesPopup(),
        Radiobox.hideAddReviewPopup();
        ajaxClass = ' class="ajax"';
        window._noAjax && (ajaxClass = ""),
        Radiobox.topPlayerTitle.html('<a href="' + href + '"' + ajaxClass + '><img class="player__station__logo" src="' + opts.img + '" alt="' + opts.name + '" /><figcaption class="player__station__name">' + opts.name + "</figcaption></a>"),
        opts.isFavorite ? (Radiobox.topPlayerFavorite.attr("class", "b-favorited"), Radiobox.topPlayerFavorite.attr("title", Radiobox.topPlayerFavorite.attr("remove_title"))) : (Radiobox.topPlayerFavorite.attr("class", "b-favorite"), Radiobox.topPlayerFavorite.attr("title", Radiobox.topPlayerFavorite.attr("add_title"))),
        opts.restricted ? Radiobox.topPlayerTrack.html("<ins>" + Radiobox.topPlayerTrack.attr("geo_blocked") + "</ins>") : "external" == opts.streamType && Radiobox.topPlayerTrack.html("<a href='" + opts.stream + '\' target="_blank">' + Radiobox.topPlayerTrack.attr("external") + "</a>")
    },
    this.lastError = "",
    this.playError = function(ajaxURL) {
        var stream;
        !Radiobox.currentStream || (stream = Radiobox.currentStream.radioId + ajaxURL) != Radiobox.lastError && (Radiobox.lastError = stream, stream = "", stream = Radiobox.currentStream.mp3 || Radiobox.currentStream.hls || Radiobox.currentStream.mpd || Radiobox.currentStream.m4a, ajaxURL = "/playerror/" + Radiobox.currentStream.radioId + "?stream=" + encodeURIComponent(stream) + "&error=" + encodeURIComponent(ajaxURL), console.log("Play error: " + ajaxURL), $.ajax({
            url: ajaxURL,
            type: "PUT",
            dataType: "json"
        }).done(function(data) {}))
    },
    this.lastPing = 0,
    this.lastPopupShow = 0,
    this.updateGa = function() {
        Radiobox.currentStream && (gtag("set", "dynx_itemid", Radiobox.currentStream.radioId), console.log("dynx_itemid: " + Radiobox.currentStream.radioId))
    },
    this.listenPing = function(start) {
        if (Radiobox.currentStream) {
            var ajaxURL = (new Date).getTime() / 1e3;
            if (this.internetChecked = ajaxURL, start)
                Radiobox.lastPing = ajaxURL,
                Radiobox.lastPopupShow = ajaxURL;
            else if (!Radiobox.lastPing)
                return;
            Radiobox.lastPopupShow < ajaxURL - 30 && (Radiobox.showAddFavouritesOrReviewPopup(ajaxURL), Radiobox.lastPopupShow = ajaxURL),
            Radiobox.lastPing > ajaxURL - 300 && !start || (Radiobox.lastPing = ajaxURL, ajaxURL = "/ping/" + Radiobox.currentStream.radioId, console.log("Ping: " + ajaxURL), $.ajax({
                url: ajaxURL,
                dataType: "json"
            }).done(function(data) {
                $("#popup_no_internet").modal("hide"),
                this.internetChecked = 0,
                gtag("event", "pageview", {
                    page: window.location.href,
                    title: window.document.title
                }),
                window.yaCounter32397750 && window.yaCounter32397750.hit(window.location.href, window.document.title)
            }))
        }
    },
    this.showTrackUpdated = 0,
    this.sameTrackTime = 0,
    this.currentCitatis = null,
    this.showTrack = function() {
        Radiobox.currentStream && (-1 == window.document.title.indexOf(" | " + Radiobox.currentStream.name) && (window.document.title = Radiobox.currentStream.name, Radiobox.mediaControllChangeTrack(Radiobox.currentStream.name, "")), window.trackServer && $.ajax({
            url: window.trackServer + Radiobox.currentStream.radioId + "?l=" + Radiobox.showTrackUpdated,
            dataType: "json"
        }).done(function(data) {
            if (console.log(data), Radiobox.currentStream && data.alias == Radiobox.currentStream.radioId && 0 != data.updated) {
                if (data.citatisId ? Radiobox.currentCitatis = {
                    id: data.citatisId,
                    isGroup: !!data.isGroup
                } : Radiobox.currentCitatis = null, Radiobox.showCurrentQuote(), Radiobox.topPlayerApple && (data.iName && Radiobox.appleDevice ? (Radiobox.topPlayerApple.attr("href", "https://srv.tunefindforfans.com/showads/track/srvclk.php?aid=100005666&artist=" + encodeURIComponent(data.iArtist || "") + "&song=" + encodeURIComponent(data.iName)), Radiobox.topPlayerApple.show()) : Radiobox.topPlayerApple.hide()), data.updated == Radiobox.showTrackUpdated) {
                    if (10 < Radiobox.sameTrackTime)
                        return;
                    Radiobox.sameTrackTime++
                } else
                    Radiobox.sameTrackTime = 0;
                data.trackId ? Radiobox.topPlayerTrack.html("<a href='/track/" + data.trackId + "/' class='ajax'>" + data.title + "</a>") : Radiobox.topPlayerTrack.html("<ins>" + data.title + "</ins>"),
                Radiobox.showProgram({
                    newLine: !1
                }),
                Radiobox.showTrackUpdated = data.updated,
                "" == data.title ? window.document.title = Radiobox.currentStream.name : window.document.title = data.title + " | " + Radiobox.currentStream.name,
                Radiobox.mediaControllChangeTrack(Radiobox.currentStream.name, data.title),
                setTimeout(function() {
                    Radiobox.showTrack()
                }, 1e3)
            } else
                Radiobox.showProgram({
                    newLine: !0
                })
        }).error(function(err) {
            Radiobox.topPlayerApple.hide(),
            console.log(err),
            setTimeout(function() {
                Radiobox.showTrack()
            }, 12e4)
        }))
    },
    this.currentQuoteCache = {},
    this.showCurrentQuote = function() {
        var emptyQuote,
            url,
            cached;
        $("#player-quote").length && (emptyQuote = {
            link: "",
            author: "",
            quote: ""
        }, Radiobox.currentCitatis ? ($("#player-quote").parent().find("img").show(), window._showQuote && (url = "/track/quote/" + Radiobox.currentCitatis.id + "/?isGroup=" + Radiobox.currentCitatis.isGroup, (cached = Radiobox.currentQuoteCache[url]) ? Radiobox.setCurrentQuote(cached) : $.ajax({
            url: url
        }).done(function(quote) {
            Radiobox.currentQuoteCache[url] = quote,
            Radiobox.setCurrentQuote(quote)
        }).fail(function() {
            Radiobox.currentQuoteCache[url] = emptyQuote,
            Radiobox.setCurrentQuote(emptyQuote)
        }))) : Radiobox.setCurrentQuote(emptyQuote))
    },
    this.setCurrentQuote = function(quote) {
        $("#player-quote").find("#player_citatis_author_link").attr("href", quote.link),
        $("#player-quote").find("h2").text(quote.author + " Quotes"),
        $("#player-quote").find("blockquote").text(quote.quote),
        "" == quote.quote ? ($("#player-quote").collapse("hide"), $("#player-quote").parent().find("img").hide()) : ($("#player-quote").collapse("show"), $("#player-quote").parent().find("img").show())
    },
    $("#player-quote").parent().find("img").on("click", function(e) {
        e.stopPropagation(),
        Radiobox.setHideQuote(!1),
        Radiobox.showCurrentQuote()
    }),
    $("#player-quote span").on("click", function() {
        Radiobox.setHideQuote(!0)
    }),
    this.setHideQuote = function(set) {
        var expires = new Date;
        expires.setTime(expires.getTime() + 31104e6),
        document.cookie = "hideQuote=" + set + ";path=/;expires=" + expires.toUTCString(),
        window._showQuote = !set,
        window._loggedIn && (set ? $.ajax({
            url: "/quote/opts/hide/"
        }) : $.ajax({
            url: "/quote/opts/show/"
        }))
    },
    this.checkShowQuote = function() {
        window._loggedIn || (window._showQuote = -1 === document.cookie.indexOf("hideQuote=true"))
    };
    var element,
        startY,
        bindElement;
    function mousemove(event) {
        event.stopPropagation(),
        event.preventDefault();
        var height = element.parent().prop("offsetHeight") - element.outerHeight(!0),
            y = event.pageY,
            y = height - ((y = "touchmove" == event.type ? event.originalEvent.touches[0].pageY : y) - startY) + element.prop("offsetHeight") / 2;
        return y < 0 ? y = 0 : height < y && (y = height), element.css({
            bottom: y + "px"
        }), Radiobox.setVolume(y / height), !1
    }
    function mouseup(event) {
        return event.stopPropagation(), event.preventDefault(), bindElement.unbind("mousemove", mousemove), bindElement.unbind("touchmove", mousemove), bindElement.unbind("mouseup", mouseup), bindElement.unbind("touchend", mouseup), !1
    }
    this.reTry = 0,
    this.reTryTimeout = 0,
    this.playTimeout = 0,
    this.clearReTryTimeout = function() {
        Radiobox.reTryTimeout && (clearTimeout(Radiobox.reTryTimeout), Radiobox.reTryTimeout = 0)
    },
    this.clearPlayTimeout = function() {
        Radiobox.playTimeout && (console.log("Playback started, clearing, timeout"), clearTimeout(Radiobox.playTimeout), Radiobox.playTimeout = 0)
    },
    this.playTimeouted = function() {
        console.log("Playback timeouted"),
        Radiobox.topPlayerTrack.html("<ins>" + Radiobox.topPlayerTrack.attr("error") + "</ins>"),
        Radiobox.clearReTryTimeout(),
        Radiobox.stopPlay(!0),
        Radiobox.updateStation(0),
        Radiobox.playError("timeouted")
    },
    this.internetChecked = 0,
    this.checkInternetInterval = 0,
    this.checkInternet = function() {
        var ajaxURL;
        Radiobox.currentStream && (ajaxURL = (new Date).getTime() / 1e3, Radiobox.internetChecked > ajaxURL - 10 || (console.log("checkInternet"), this.internetChecked = ajaxURL, ajaxURL = "https://onlineradiobox.com/ping/" + Radiobox.currentStream.radioId, console.log("Check Ping: " + ajaxURL), $.ajax({
            url: ajaxURL,
            dataType: "json"
        }).done(function(data) {
            console.log("Internet is available"),
            $("#popup_no_internet").modal("hide")
        }).error(function(ev) {
            console.log("Fail internet check"),
            $("#popup_no_internet").modal("show"),
            Radiobox.setCheckInternetTimeout()
        })))
    },
    this.setCheckInternetTimeout = function() {
        Radiobox.checkInternetInterval || (console.log("Start internet interval"), Radiobox.checkInternetInterval = setInterval(Radiobox.checkInternet, 5e3))
    },
    this.clearCheckInternetTimeout = function() {
        Radiobox.checkInternetInterval && (console.log("Clear internet interval"), clearInterval(Radiobox.checkInternetInterval), Radiobox.checkInternetInterval = 0)
    },
    this.topPlayer = videojs("top_player", {
        height: "1px",
        width: "1px",
        autoplay: !1,
        controls: null,
        playsinline: !0,
        html5: {
            nativeTextTracks: !1
        }
    }),
    this.topPlayer.ready(function() {
        Radiobox.topPlayer.reset(),
        console.log("Player ready"),
        Radiobox.initVolume(),
        Radiobox.checkSetStation(),
        this.on("error", function(error) {
            error.stopImmediatePropagation();
            error = this.player().error();
            if (console.log("Player error:", error, Radiobox.reTry), Radiobox.checkInternet(), Radiobox.currentStream && (Radiobox.currentStream.geoBlocked || Radiobox.currentStream.stopped) && Radiobox.reTry && Radiobox.reTry < 4 && (Radiobox.reTry = 4), Radiobox.reTry++, Radiobox.reTry <= 5)
                return Radiobox.clearReTryTimeout(), void (Radiobox.reTryTimeout = setTimeout(function() {
                    console.log("Retrying  after " + 1e3 * Radiobox.reTry),
                    Radiobox.reTryTimeout = 0,
                    Radiobox.topPlayButton.click(),
                    Radiobox.topPlayButton.click()
                }, 1e3 * Radiobox.reTry));
            Radiobox.reTry = 0,
            Radiobox.currentStream && Radiobox.currentStream.geoBlocked ? Radiobox.topPlayerTrack.html("<ins>" + Radiobox.topPlayerTrack.attr("geo_blocked") + "</ins>") : Radiobox.currentStream && Radiobox.currentStream.stopped ? (Radiobox.topPlayerTrack.html("<ins>" + Radiobox.topPlayerTrack.attr("stopped") + "</ins>"), Radiobox.currentStream.stoppedTried = !0, $("#popup_disabled").modal("show")) : Radiobox.topPlayerTrack.html("<ins>" + Radiobox.topPlayerTrack.attr("error") + "</ins>"),
            Radiobox.clearPlayTimeout(),
            Radiobox.stopPlay(!0),
            Radiobox.updateStation(0),
            Radiobox.playError(error.code)
        }),
        this.on("loadedmetadata", function() {
            console.log("loadedmetadata"),
            Radiobox.showTrackUpdated = 0,
            Radiobox.listenPing(!0),
            Radiobox.updateGa()
        }),
        this.on("loadeddata", function() {
            console.log("loadeddata"),
            Radiobox.reTry = 0,
            Radiobox.clearReTryTimeout(),
            Radiobox.clearPlayTimeout(),
            Radiobox.topPlayerTrack.html("<ins>" + Radiobox.topPlayerTrack.attr("playing") + "</ins>"),
            Radiobox.showTrack(),
            Radiobox.showAppBanner(),
            Radiobox.playError("ok"),
            Radiobox.setCheckInternetTimeout()
        }),
        this.on("timeupdate", function() {
            Radiobox.listenPing()
        })
    }),
    this.stopPlay = function(dontClearTrack) {
        Radiobox.popupPlayer && Radiobox.popupPlayer.close(),
        Radiobox.clearReTryTimeout(),
        Radiobox.clearPlayTimeout(),
        Radiobox.clearCheckInternetTimeout(),
        Radiobox.topPlayer.pause(),
        Radiobox.topPlayer.reset(),
        Radiobox.topPlayButton.removeClass("b-stop"),
        Radiobox.topPlayButton.addClass("b-play"),
        dontClearTrack || Radiobox.topPlayerTrack.html(""),
        window.document.title = Radiobox.currentTitle,
        Radiobox.lastPing = 0,
        Radiobox.showProgram({
            hide: !0
        }),
        Radiobox.currentCitatis = null,
        Radiobox.showCurrentQuote()
    },
    this.updateStationPlayButtons = function() {
        Radiobox.currentStream && Radiobox.bodyWrapper.find(".station_play").each(function() {
            $(this).removeClass("b-stop"),
            $(this).removeClass("b-play"),
            $(this).parent().removeClass("active"),
            $(this).attr("radioId") == Radiobox.currentStream.radioId ? ($(this).addClass(Radiobox.topPlayButton.attr("class")), $(this).parent().addClass("active")) : $(this).addClass("b-play")
        })
    },
    this.isMobile = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase()) || /Mobi/i.test(navigator.userAgent.toLowerCase()),
    this.checkSetStation = function() {
        var setRadio = $("#set_radio_button");
        setRadio.length && ($("#jp_container_1").show(), Radiobox.setStreamByObj(setRadio), Radiobox.isMobile || "1" != setRadio.attr("played") || function() {
            try {
                var audio = new Audio,
                    src = audio.canPlayType("audio/ogg") ? "data:audio/ogg;base64,T2dnUwACAAAAAAAAAADqnjMlAAAAAOyyzPIBHgF2b3JiaXMAAAAAAUAfAABAHwAAQB8AAEAfAACZAU9nZ1MAAAAAAAAAAAAA6p4zJQEAAAANJGeqCj3//////////5ADdm9yYmlzLQAAAFhpcGguT3JnIGxpYlZvcmJpcyBJIDIwMTAxMTAxIChTY2hhdWZlbnVnZ2V0KQAAAAABBXZvcmJpcw9CQ1YBAAABAAxSFCElGVNKYwiVUlIpBR1jUFtHHWPUOUYhZBBTiEkZpXtPKpVYSsgRUlgpRR1TTFNJlVKWKUUdYxRTSCFT1jFloXMUS4ZJCSVsTa50FkvomWOWMUYdY85aSp1j1jFFHWNSUkmhcxg6ZiVkFDpGxehifDA6laJCKL7H3lLpLYWKW4q91xpT6y2EGEtpwQhhc+211dxKasUYY4wxxsXiUyiC0JBVAAABAABABAFCQ1YBAAoAAMJQDEVRgNCQVQBABgCAABRFcRTHcRxHkiTLAkJDVgEAQAAAAgAAKI7hKJIjSZJkWZZlWZameZaouaov+64u667t6roOhIasBACAAAAYRqF1TCqDEEPKQ4QUY9AzoxBDDEzGHGNONKQMMogzxZAyiFssLqgQBKEhKwKAKAAAwBjEGGIMOeekZFIi55iUTkoDnaPUUcoolRRLjBmlEluJMYLOUeooZZRCjKXFjFKJscRUAABAgAMAQICFUGjIigAgCgCAMAYphZRCjCnmFHOIMeUcgwwxxiBkzinoGJNOSuWck85JiRhjzjEHlXNOSuekctBJyaQTAAAQ4AAAEGAhFBqyIgCIEwAwSJKmWZomipamiaJniqrqiaKqWp5nmp5pqqpnmqpqqqrrmqrqypbnmaZnmqrqmaaqiqbquqaquq6nqrZsuqoum65q267s+rZru77uqapsm6or66bqyrrqyrbuurbtS56nqqKquq5nqq6ruq5uq65r25pqyq6purJtuq4tu7Js664s67pmqq5suqotm64s667s2rYqy7ovuq5uq7Ks+6os+75s67ru2rrwi65r66os674qy74x27bwy7ouHJMnqqqnqq7rmarrqq5r26rr2rqmmq5suq4tm6or26os67Yry7aumaosm64r26bryrIqy77vyrJui67r66Ys67oqy8Lu6roxzLat+6Lr6roqy7qvyrKuu7ru+7JuC7umqrpuyrKvm7Ks+7auC8us27oxuq7vq7It/KosC7+u+8Iy6z5jdF1fV21ZGFbZ9n3d95Vj1nVhWW1b+V1bZ7y+bgy7bvzKrQvLstq2scy6rSyvrxvDLux8W/iVmqratum6um7Ksq/Lui60dd1XRtf1fdW2fV+VZd+3hV9pG8OwjK6r+6os68Jry8ov67qw7MIvLKttK7+r68ow27qw3L6wLL/uC8uq277v6rrStXVluX2fsSu38QsAABhwAAAIMKEMFBqyIgCIEwBAEHIOKQahYgpCCKGkEEIqFWNSMuakZM5JKaWUFEpJrWJMSuaclMwxKaGUlkopqYRSWiqlxBRKaS2l1mJKqcVQSmulpNZKSa2llGJMrcUYMSYlc05K5pyUklJrJZXWMucoZQ5K6iCklEoqraTUYuacpA46Kx2E1EoqMZWUYgupxFZKaq2kFGMrMdXUWo4hpRhLSrGVlFptMdXWWqs1YkxK5pyUzDkqJaXWSiqtZc5J6iC01DkoqaTUYiopxco5SR2ElDLIqJSUWiupxBJSia20FGMpqcXUYq4pxRZDSS2WlFosqcTWYoy1tVRTJ6XFklKMJZUYW6y5ttZqDKXEVkqLsaSUW2sx1xZjjqGkFksrsZWUWmy15dhayzW1VGNKrdYWY40x5ZRrrT2n1mJNMdXaWqy51ZZbzLXnTkprpZQWS0oxttZijTHmHEppraQUWykpxtZara3FXEMpsZXSWiypxNhirLXFVmNqrcYWW62ltVprrb3GVlsurdXcYqw9tZRrrLXmWFNtBQAADDgAAASYUAYKDVkJAEQBAADGMMYYhEYpx5yT0ijlnHNSKucghJBS5hyEEFLKnINQSkuZcxBKSSmUklJqrYVSUmqttQIAAAocAAACbNCUWByg0JCVAEAqAIDBcTRNFFXVdX1fsSxRVFXXlW3jVyxNFFVVdm1b+DVRVFXXtW3bFn5NFFVVdmXZtoWiqrqybduybgvDqKqua9uybeuorqvbuq3bui9UXVmWbVu3dR3XtnXd9nVd+Bmzbeu2buu+8CMMR9/4IeTj+3RCCAAAT3AAACqwYXWEk6KxwEJDVgIAGQAAgDFKGYUYM0gxphhjTDHGmAAAgAEHAIAAE8pAoSErAoAoAADAOeecc84555xzzjnnnHPOOeecc44xxhhjjDHGGGOMMcYYY4wxxhhjjDHGGGOMMcYYY0wAwE6EA8BOhIVQaMhKACAcAABACCEpKaWUUkoRU85BSSmllFKqFIOMSkoppZRSpBR1lFJKKaWUIqWgpJJSSimllElJKaWUUkoppYw6SimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaWUUkoppZRSSimllFJKKaVUSimllFJKKaWUUkoppRQAYPLgAACVYOMMK0lnhaPBhYasBAByAwAAhRiDEEJpraRUUkolVc5BKCWUlEpKKZWUUqqYgxBKKqmlklJKKbXSQSihlFBKKSWUUkooJYQQSgmhlFRCK6mEUkoHoYQSQimhhFRKKSWUzkEoIYUOQkmllNRCSB10VFIpIZVSSiklpZQ6CKGUklJLLZVSWkqpdBJSKamV1FJqqbWSUgmhpFZKSSWl0lpJJbUSSkklpZRSSymFVFJJJYSSUioltZZaSqm11lJIqZWUUkqppdRSSiWlkEpKqZSSUmollZRSaiGVlEpJKaTUSimlpFRCSamlUlpKLbWUSkmptFRSSaWUlEpJKaVSSksppRJKSqmllFpJKYWSUkoplZJSSyW1VEoKJaWUUkmptJRSSymVklIBAEAHDgAAAUZUWoidZlx5BI4oZJiAAgAAQABAgAkgMEBQMApBgDACAQAAAADAAAAfAABHARAR0ZzBAUKCwgJDg8MDAAAAAAAAAAAAAACAT2dnUwAEAAAAAAAAAADqnjMlAgAAADzQPmcBAQA=" : "data:audio/mpeg;base64,/+MYxAAAAANIAUAAAASEEB/jwOFM/0MM/90b/+RhST//w4NFwOjf///PZu////9lns5GFDv//l9GlUIEEIAAAgIg8Ir/JGq3/+MYxDsLIj5QMYcoAP0dv9HIjUcH//yYSg+CIbkGP//8w0bLVjUP///3Z0x5QCAv/yLjwtGKTEFNRTMuOTeqqqqqqqqqqqqq/+MYxEkNmdJkUYc4AKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
                audio.autoplay = !0,
                $(audio).on("play", function() {
                    Radiobox.topPlayButton.click()
                }),
                audio.src = src
            } catch (e) {
                console.log("[AUTOPLAY-ERROR]", e)
            }
        }())
    },
    this.addPlayerState = function(url) {
        return Radiobox.currentStream ? Radiobox.replaceQuery({
            cs: Radiobox.currentStream.radioId,
            played: Radiobox.topPlayer.paused() ? 0 : 1
        }, {}, url) : url
    },
    this.topPlayButton = $("#b_top_play"),
    this.updateStation = function(played) {
        var expires = Radiobox.replaceQuery({
            cs: Radiobox.currentStream.radioId,
            played: played
        }, {});
        Radiobox.pushHistoryState({
            state: "player"
        }, $("head title").text(), expires);
        expires = new Date;
        expires.setTime(expires.getTime() + 31104e6),
        document.cookie = "cs=" + Radiobox.currentStream.radioId + "|" + played + ";path=/;expires=" + expires.toUTCString(),
        Radiobox.updateStationPlayButtons()
    },
    $("#alternative-stations-link").click(function() {
        $("#popup_disabled").modal("hide")
    }),
    $("#disabled_subscribe").click(function() {
        event.stopPropagation(),
        event.preventDefault();
        var email = $(this).parent().find("input[type=email]").val();
        email && $.ajax({
            url: "/json/subscribe/?radio=" + Radiobox.currentStream.radioId + "&email=" + encodeURIComponent(email),
            dataType: "json"
        }).done(function(data) {
            $("#popup_disabled").modal("hide")
        })
    }),
    this.topPlayButton.click(function(played) {
        if (Radiobox.currentStream) {
            if (Radiobox.currentStream.external)
                return void window.open(Radiobox.currentStream.external, "_blank");
            if (Radiobox.currentStream.stoppedTried)
                return played.stopPropagation(), played.preventDefault(), Radiobox.updateStationPlayButtons(), Radiobox.topPlayerTrack.html(Radiobox.topPlayerTrack.attr("stopped")), void $("#popup_disabled").modal("show");
            if (Radiobox.currentStream.restricted)
                return
        }
        played = 0;
        if ("b-play" == $(this).attr("class")) {
            if (Radiobox.openPlayerPopup())
                return;
            for (var stream in played = 1, $(this).removeClass("b-play"), $(this).addClass("b-stop"), Radiobox.currentStream)
                switch (stream) {
                case "mp3":
                    Radiobox.topPlayer.src({
                        type: "audio/mp3",
                        src: Radiobox.currentStream.mp3
                    });
                    break;
                case "m4a":
                    Radiobox.topPlayer.src({
                        type: "audio/mp4",
                        src: Radiobox.currentStream.m4a
                    });
                    break;
                case "hls":
                    window.Hls ? Radiobox.topPlayer.src({
                        type: "application/x-mpegURL",
                        src: Radiobox.currentStream.hls
                    }) : $.getScript(window._hlsurl).done(function(script, textStatus) {
                        Radiobox.topPlayer.src({
                            type: "application/x-mpegURL",
                            src: Radiobox.currentStream.hls
                        })
                    });
                    break;
                case "mpd":
                    window.dashjs ? Radiobox.topPlayer.src({
                        type: "application/dash+xml",
                        src: Radiobox.currentStream.mpd
                    }) : $.getScript(window._dashurl).done(function(script, textStatus) {
                        Radiobox.topPlayer.src({
                            type: "application/dash+xml",
                            src: Radiobox.currentStream.mpd
                        })
                    })
                }
            Radiobox.currentStream.listeners || (console.log("No listeners, setting 20s timeout"), Radiobox.playTimeout = setTimeout(Radiobox.playTimeouted, 2e4)),
            Radiobox.topPlayer.play(),
            Radiobox.initVolume(),
            Radiobox.topPlayerTrack.html("<ins>" + Radiobox.topPlayerTrack.attr("loading") + "</ins>"),
            $("#b_vol_control").removeClass("b-mute"),
            Radiobox.topPlayer.muted(!1)
        } else
            played = 0,
            Radiobox.stopPlay();
        Radiobox.updateStation(played),
        window.admanInit && (window.admanInit(Radiobox, played), console.log("Init adman after update"))
    }),
    this.popupPlayer = null,
    this.switchPlayState = function(played) {
        played ? "b-play" == Radiobox.topPlayButton.attr("class") && (Radiobox.topPlayButton.removeClass("b-play"), Radiobox.topPlayButton.addClass("b-stop")) : "b-stop" == Radiobox.topPlayButton.attr("class") && (Radiobox.topPlayButton.addClass("b-play"), Radiobox.topPlayButton.removeClass("b-stop")),
        Radiobox.updateStation(played)
    },
    this.checkChrome80 = function() {
        var name = navigator.userAgent,
            version = (version = name.match(/(opr|opera|chrome|yabrowser|safari|firefox|msie|trident(?=\/))\/?\s*(\d+(.\d+)?)/i) || [])[2] ? [version[1], version[2]] : [navigator.appName, navigator.appVersion, "-?"],
            name = name.match(/version\/(\d+(.\d+)?)/i);
        null != name && version.splice(1, 1, name[1]);
        name = version[0],
        version = parseFloat(version[1]);
        return "Chrome" === name && 80 <= version || ("YaBrowser" === name && 20.7 <= version || ("OPR" === name || "opera" === name) && 69 <= version)
    },
    this.openPlayerPopup = function() {
        var url = Radiobox.currentStream,
            path = !1;
        url && (path = "http:" == (url.mp3 || url.m4a || url.hls || url.mpd || "").slice(0, 5));
        var dimension = isFacebookBrowser(),
            needPopup = "https:" == location.protocol && -1 == location.href.indexOf("/player/") && path && (url.hls || Radiobox.checkChrome80() || dimension);
        if (!needPopup)
            return Radiobox.popupPlayer && Radiobox.popupPlayer.close(), needPopup;
        path = Radiobox.currentStream.radioId.replace(".", "/", 1),
        url = "";
        /(android)/i.test(navigator.userAgent) ? url = "&os=android" : /(iphone|ipad)/i.test(navigator.userAgent) && (url = "&os=ios");
        url = "http://p.onlineradiobox.com/" + path + "/player/?played=1&cs=" + Radiobox.currentStream.radioId + url;
        if (!dimension) {
            dimension = "left=" + ($(window).width() / 2 - 170) + ",width=340,height=520";
            return (Radiobox.popupPlayer = window.open(url, "orb_player", dimension + ",toolbar=1,location=1,resizable=1,status=1,menubar=1"), Radiobox.popupPlayer) ? (Radiobox.updateStation(0), needPopup) : needPopup
        }
        window.location.href = url
    },
    $("#b_vol_control").click(function() {
        $(this).toggleClass("b-mute"),
        $(this).hasClass("b-mute") ? Radiobox.topPlayer.muted(!0) : Radiobox.topPlayer.muted(!1)
    }),
    this.volume = .8,
    this.setVolume = function(volume) {
        Radiobox.volume = volume,
        Radiobox.topPlayer.volume(volume),
        Radiobox.topVolSlider.attr("aria-valuenow", Math.trunc(100 * volume));
        var expires = new Date;
        expires.setTime(expires.getTime() + 31104e6),
        document.cookie = "vlm=" + volume + ";path=/;expires=" + expires.toUTCString()
    },
    this.initVolume = function() {
        var volume = document.cookie.match(new RegExp("vlm=([^;]+)"));
        volume && (volume = parseFloat(volume[1]), Radiobox.volume = volume, console.log("Set volume: " + volume), Radiobox.topPlayer.volume(volume), Radiobox.topVolSlider.attr("aria-valuenow", Math.trunc(100 * volume)))
    },
    this.topVolControl = $("#top_volume_control"),
    element = this.topVolControl,
    startY = 0,
    bindElement = $(document.documentElement),
    element.parent().on("click", function(y) {
        if ((y.target || y.srcElement) == this) {
            y.stopPropagation(),
            y.preventDefault();
            var height = element.parent().prop("offsetHeight") - element.outerHeight(!0),
                y = height - y.offsetY + element.outerHeight(!0) / 2;
            return height < y ? y = height : y < 0 && (y = 0), element.css({
                bottom: y + "px"
            }), Radiobox.setVolume(y / height), !1
        }
    }),
    element.on("mousedown touchstart", function(event) {
        event.stopPropagation(),
        event.preventDefault();
        var eventY = event.pageY;
        return "touchstart" == event.type && (eventY = event.originalEvent.touches[0].pageY), startY = eventY - element.prop("offsetTop"), bindElement.on("mousemove touchmove", mousemove), bindElement.on("mouseup touchend", mouseup), !1
    });
    this.topVolSlider = $("#top_volume_slider"),
    $("#top_vol_panel").on("mouseover", function() {
        var height = 160 - Radiobox.topVolControl.outerHeight(!0),
            y = height * Radiobox.volume;
        console.log(["init", height, Radiobox.volume, y]),
        Radiobox.topVolControl.css({
            bottom: y + "px"
        })
    }),
    this.setStreamByObj = function(obj) {
        Radiobox.setStream({
            id: obj.attr("radioId"),
            name: obj.attr("radioName"),
            img: obj.attr("radioImg"),
            streamType: obj.attr("streamType"),
            stream: obj.attr("stream"),
            isFavorite: "true" == obj.attr("isFavorite"),
            geoBlocked: "true" == obj.attr("geoBlocked"),
            restricted: "true" == obj.attr("restricted"),
            stopped: "true" == obj.attr("stopped"),
            userHasReview: "true" == obj.attr("userHasReview"),
            radioHasProgram: "true" == obj.attr("radioHasProgram"),
            listeners: obj.attr("listeners"),
            instId: obj.attr("instId")
        }),
        Radiobox.reTry = 0,
        Radiobox.clearReTryTimeout()
    },
    $("body").on("click", ".station_play", function(evt) {
        var stationPlayButtons = Radiobox.bodyWrapper.find(".station_play"),
            hasPlay = $(this).hasClass("b-play");
        stationPlayButtons.removeClass("b-stop"),
        stationPlayButtons.addClass("b-play"),
        stationPlayButtons.parent().removeClass("active"),
        hasPlay ? (Radiobox.stopPlay(), Radiobox.setStreamByObj($(this)), !Radiobox.currentStream || Radiobox.currentStream.external || Radiobox.currentStream.restricted || ($(this).parent().addClass("active"), $(this).removeClass("b-play"), $(this).addClass("b-stop"))) : ($(this).removeClass("b-stop"), $(this).addClass("b-play"), $(this).parent().removeClass("active")),
        Radiobox.topPlayButton.click(),
        evt.preventDefault()
    }),
    this.topPlayerTrack = $("#top_player_track"),
    this.topPlayerApple = $("#top_player_apple"),
    this.appleDevice = /(iphone|ipad|Macintosh)/i.test(navigator.userAgent),
    this.changeStation = function(direction) {
        var ajaxURL = window.location.href.split("?"),
            pages = ajaxURL[0].split("/");
        if ("track" == pages[3] || "favorites" == pages[3])
            for (var classes = $("#footer-section").find("i.i-flag").attr("class").split(" "), i = 0; i < classes.length; i++)
                if ("i-flag" != classes[i]) {
                    pages[3] = classes[i];
                    break
                }
        ajaxURL = "/" + pages[3] + "/?changeStation=" + direction + (ajaxURL[1] ? "&" + ajaxURL[1] : "");
        console.log("Ajax: " + ajaxURL),
        $.ajax({
            url: ajaxURL,
            dataType: "json"
        }).done(function(data) {
            data && data.id && (Radiobox.setStream(data), Radiobox.topPlayButton.hasClass("b-play") ? Radiobox.updateStation(0) : (Radiobox.stopPlay(), Radiobox.topPlayButton.click()))
        })
    },
    $("#top_player_bwd").click(function() {
        Radiobox.changeStation(-1)
    }),
    $("#top_player_fwd").click(function() {
        Radiobox.changeStation(1)
    }),
    $("body").on("submit", "#search_form", function(val) {
        val.preventDefault();
        var val = $(this).find("input[type=search]").val(),
            query = "";
        0 < val.length && (query += "q=" + encodeURIComponent(val)),
        $(this).find("input[type=hidden]").each(function() {
            0 < $(this).val().length && (query += "&" + $(this).attr("name") + "=" + encodeURIComponent($(this).val()));
            var countryParam = window.location.search.match(/c=([^&]*)/);
            countryParam && countryParam[1] && (countryParam = countryParam[1], query += "&c=" + countryParam)
        }),
        0 < query.length && Radiobox.changePage("/search?" + query)
    }),
    $("#user-agree").click(function(elem) {
        $(this).is(":checked") ? ($("#user-agree").parent().removeClass("alert"), $(".socialLoginPopup").removeClass("disabled")) : $(".socialLoginPopup").addClass("disabled")
    }),
    $("body").on("click", ".socialLoginPopup", function(elem) {
        $("#user-agree").is(":checked") ? "true" !== $(this).attr("haspopup") && (isFacebookBrowser() ? window.location.href = "/social/redirect/" + $(this).attr("network") : window.open("/social/redirect/" + $(this).attr("network"), "_blank", "width=1050,height=500,resizable=yes,scrollbars=yes,status=yes")) : $("#user-agree").parent().addClass("alert")
    }),
    $("#panel_mobile_playmarket_close").click(function() {
        $("#panel_mobile_playmarket").hide();
        var expires = new Date;
        expires.setTime(expires.getTime() + 15552e6),
        document.cookie = "mbc=1;path=/;expires=" + expires.toUTCString()
    }),
    this.bodyWrapper.on("click", "#all_region_collapse", function() {
        $("#top-regions").toggle(),
        $("#cities_all").collapse("hide")
    }),
    this.bodyWrapper.on("click", "#all_city_collapse", function() {
        $("#top-regions").toggle(),
        $("#regions_all").collapse("hide")
    }),
    this.hideCookieAlert = function(isCalifornia) {
        $("#alert_cookies").hide();
        var expires = new Date;
        expires.setTime(expires.getTime() + 31104e6),
        document.cookie = "ca=" + Math.floor(+new Date / 1e3) + ";path=/;expires=" + expires.toUTCString(),
        isCalifornia && (document.cookie = "cac=1;path=/;expires=" + expires.toUTCString(), $("#ccpa_check").is(":checked") && (document.cookie = "rccpa=1;path=/;expires=" + expires.toUTCString(), window.location.reload()))
    },
    $("#alert_cookies_close").click(function() {
        var isCalifornia = "true" == $(this).parents("div").attr("california");
        Radiobox.hideCookieAlert(isCalifornia)
    }),
    $("#alert_cookies_close").parents("div").find("a").click(function() {
        var isCalifornia = "true" == $(this).parents("div").attr("california");
        Radiobox.hideCookieAlert(isCalifornia)
    }),
    $("#restrict_ccpa").on("click", function(expires) {
        expires.preventDefault();
        expires = new Date;
        expires.setTime(expires.getTime() + 15552e7),
        document.cookie = "rccpa=1;path=/;expires=" + expires.toUTCString(),
        gtag("event", {
            hitType: "event",
            eventCategory: "privacy",
            eventAction: "restrict",
            eventLabel: "CCPA restrict"
        }),
        window.location.reload()
    }),
    $("#eu_cookie_settings").click(function() {
        $(".modal--cookies").fadeTo("fast", 0, function() {
            $(".modal--cookies").hide(),
            $(".modal--cookies-settings").addClass("display--flex").fadeTo("fast", 1)
        })
    }),
    $("#eu_prv_cookie_settings").click(function() {
        $(".modal--cookies-settings").addClass("display--flex").fadeTo("fast", 1),
        $(".modal--cookies-backdrop").fadeTo("fast", 1)
    }),
    $(".modal--cookies .button").on("click", function() {
        $(".modal--cookies, .modal--cookies-backdrop").fadeTo("fast", 0, function() {
            $(".modal--cookies, .modal--cookies-backdrop").hide()
        })
    }),
    $(".modal--cookies-settings button").on("click", function() {
        $(".modal--cookies-settings, .modal--cookies-backdrop").fadeTo("fast", 0, function() {
            $(".modal--cookies-settings, .modal--cookies-backdrop").hide()
        })
    }),
    this.euClosed = !1,
    $(".modal--cookies .modal__i-close, .modal--cookies-settings .modal__i-close").click(function() {
        Radiobox.euClosed = !0,
        $(".modal--cookies, .modal--cookies-settings, .modal--cookies-backdrop").fadeTo("fast", 0, function() {
            $(".modal--cookies, .modal--cookies-settings, .modal--cookies-backdrop").hide()
        })
    }),
    $("#agree_eu_cookies").on("click", function() {
        SetCookie({
            name: "ca",
            value: Math.floor(+new Date / 1e3)
        }),
        SetCookie({
            name: "eus",
            value: "111"
        }),
        window.location.reload()
    }),
    $("#save_cookies_settings").on("click", function() {
        var settings = [],
            decline = !1;
        $("#cookies-gad").is(":checked") ? settings.push(1) : (settings.push(0), decline = !0),
        $("#cookies-gan").is(":checked") ? settings.push(1) : (settings.push(0), decline = !0),
        $("#cookies-soc").is(":checked") ? settings.push(1) : (settings.push(0), decline = !0),
        decline && $.ajax({
            url: "/cookie/settings",
            dataType: "json"
        }).done(function(data) {
            window.location.reload()
        }).fail(function(data) {
            window.location.reload()
        }),
        SetCookie({
            name: "eus",
            value: settings.join("")
        }),
        SetCookie({
            name: "ca",
            value: Math.floor(+new Date / 1e3)
        })
    }),
    $("#enable_all_eu_settings_cookies").on("click", function() {
        SetCookie({
            name: "eus",
            value: "111"
        }),
        SetCookie({
            name: "ca",
            value: Math.floor(+new Date / 1e3)
        }),
        window.location.reload()
    }),
    this.bodyWrapper.on("click", ".now_playing_tr", function(evt) {
        evt.originalEvent && !$(evt.toElement).hasClass("station_play") && $(this).find(".station_play").click()
    }),
    this.updateNowPlaying = function() {
        var ajaxURL,
            countryNowPlaying = $("#country_now_playing");
        countryNowPlaying.length && (ajaxURL = "/" + countryNowPlaying.attr("country") + "/?nowlisten=1", console.log("Update now listening: " + ajaxURL), $.ajax({
            url: ajaxURL,
            dataType: "json"
        }).done(function(data) {
            countryNowPlaying.html(data.data)
        }))
    },
    this.renderConnectedDevicesDate = function() {
        var connectedDevices,
            currentLang;
        -1 === location.href.indexOf("/pair") && -1 === location.href.indexOf("/connect") || (connectedDevices = this.bodyWrapper.find("#connected_devices"), currentLang = connectedDevices.data("lang"), connectedDevices.find("li").each(function() {
            var self = $(this),
                date = parseInt(self.data("paired-at")),
                date = new Date(1e3 * date);
            self.append(" - (" + date.toLocaleDateString(currentLang) + ")")
        }))
    },
    this.bodyWrapper.on("click", ".tracks_rating_country", function(evt) {
        var ajaxURL = "/music/?tracksRating=" + $(this).attr("country");
        console.log("Loading tracks rating: " + ajaxURL),
        evt.preventDefault(),
        $("#top_tracks_countries_all").find("li").removeClass("active"),
        $("#top_tracks_countries_all").collapse("hide"),
        $("#top_tracks_current_country").find("span[role=button]").html($(this).attr("countryDecName")),
        $("#top_tracks_current_country").removeClass($("#top_tracks_current_country").attr("country")),
        $("#top_tracks_current_country").addClass($(this).attr("country")),
        $("#top_tracks_current_country").attr("country", $(this).attr("country")),
        $(this).parent().addClass("active"),
        $.ajax({
            url: ajaxURL,
            dataType: "json"
        }).done(function(data) {
            $("#top10LocalTracks").html(data.data)
        })
    }),
    this.bodyWrapper.on("click", ".tracks_rating_genre", function(evt) {
        var ajaxURL = "/music/?tracksGenre=" + $(this).attr("genre");
        console.log("Loading genre tracks rating: " + ajaxURL),
        evt.preventDefault(),
        $("#tracks_genres_all").find("li").removeClass("active"),
        $("#tracks_genres_all").collapse("hide"),
        $("#top_tracks_current_genre").find("span[role=button]").html($(this).html()),
        $(this).parent().addClass("active"),
        $.ajax({
            url: ajaxURL,
            dataType: "json"
        }).done(function(data) {
            $("#top10GenreTracks").html(data.data)
        })
    }),
    this.bodyWrapper.on("submit", ".post_form", function(evt) {
        var updateOnly = !1;
        $(this).attr("update-only") && (updateOnly = !0);
        var vars = $(this).serialize();
        Radiobox.changePage($(this).attr("action"), $(this).attr("anchor"), vars, updateOnly),
        evt.preventDefault()
    }),
    this.bodyWrapper.on("click", "#webcam_link", function(evt) {
        var $webcamContainer = $("#popup_webcam");
        Radiobox.activateWebcam($webcamContainer)
    }),
    this.bodyWrapper.on("hidden.bs.modal", "#popup_webcam", function() {
        var $webcamContainer = $("#popup_webcam");
        Radiobox.stopWebcam($webcamContainer)
    }),
    this.webcamImgTimer = 0,
    this.activateWebcam = function($webcamContainer) {
        var hidePlayer = !1,
            webcamIframe = $("#webcam_hls");
        0 < webcamIframe.length && ("true" == webcamIframe.attr("sound") && (hidePlayer = !0), Radiobox.WebcamPlayer && delete videojs.getPlayers()[webcamIframe.attr("id")], Radiobox.WebcamPlayer = videojs("webcam_hls", {
            children: ["mediaLoader"]
        }), Radiobox.WebcamPlayer.play());
        var webcamImg,
            webcamIframe = $webcamContainer.find("iframe");
        0 < webcamIframe.length ? (Radiobox.wasPlayedBefore = !1, "true" == webcamIframe.attr("sound") && (hidePlayer = !0), webcamIframe.attr("src", webcamIframe.attr("webcamLink"))) : 0 < (webcamImg = $webcamContainer.find("img")).length && (webcamImg.attr("src", webcamImg.attr("webcamLink") + "&rrnd=" + Math.random()), Radiobox.webcamImgTimer = setInterval(function() {
            webcamImg.attr("src", webcamImg.attr("webcamLink") + "&rrnd=" + Math.random())
        }, 3e4)),
        hidePlayer && (Radiobox.topPlayButton.hasClass("b-stop") && (Radiobox.topPlayButton.click(), Radiobox.wasPlayedBefore = !0), $(".player").hide())
    },
    this.stopWebcam = function(webcamIframe) {
        Radiobox.WebcamPlayer && (Radiobox.WebcamPlayer.pause(), Radiobox.wasPlayedBefore && Radiobox.topPlayButton.click());
        webcamIframe = webcamIframe.find("iframe");
        0 < webcamIframe.length ? (webcamIframe.attr("src", ""), Radiobox.wasPlayedBefore && Radiobox.topPlayButton.click()) : Radiobox.webcamImgTimer && (clearInterval(Radiobox.webcamImgTimer), Radiobox.webcamImgTimer = 0),
        $(".player").show()
    },
    this.getLocation = function() {
        try {
            return window.Intl.DateTimeFormat().resolvedOptions().timeZone
        } catch (e) {
            console.log(e)
        }
        return null
    },
    this.timeSynced = !1,
    this.checkTimeZoneSync = function() {
        var curTimezoneOffset = this.getLocation();
        if (curTimezoneOffset && window.syncTimeTZLoc && curTimezoneOffset != window.syncTimeTZLoc)
            return Radiobox.timeSynced = !0, console.log("Need sync time(timezone): " + window.syncTimeTZLoc + ",system=" + curTimezoneOffset), void Radiobox.changePage(window.location.href, !1, !1, !0);
        Radiobox.timeSynced || null == window.syncTimeTZ || (curTimezoneOffset = (new Date).getTimezoneOffset(), window.syncTimeTZ != curTimezoneOffset && (Radiobox.timeSynced = !0, console.log("Need sync time: " + window.syncTimeTZ + ",system=" + curTimezoneOffset), Radiobox.changePage(window.location.href, !1, !1, !0)))
    },
    this.bodyWrapper.on("click", "#connect_btn", function(evt) {
        var t = $(evt.target),
            f = t.parent().find(".connect__form"),
            time = f.find("time").find("ins");
        t.hide();
        console.log("Connect: /json/connect"),
        $.ajax({
            url: "/json/connect",
            type: "POST",
            dataType: "json"
        }).done(function(data) {
            function updateTime() {
                var mins = parseInt(data.duration / 60),
                    ts = data.duration - 60 * mins,
                    ts = mins + ":" + (9 < ts ? ts : "0" + ts);
                time.html(ts)
            }
            updateTime(),
            $("#connect_code").html(data.code),
            f.collapse("show");
            var timer = setInterval(function() {
                data.duration--,
                updateTime()
            }, 1e3);
            setTimeout(function() {
                clearInterval(timer),
                t.show(),
                f.collapse("hide")
            }, 1e3 * data.duration)
        }).fail(function(data) {
            t.show(),
            f.collapse("hide"),
            403 == data.status ? alert("Please log in") : alert("Fail to get code")
        })
    }),
    this.bodyWrapper.on("click", "#pair_btn", function(ajaxURL) {
        ajaxURL.preventDefault();
        ajaxURL = "/json/pair?code=" + $("#pair_code").val();
        console.log("Pair: " + ajaxURL),
        $.ajax({
            url: ajaxURL,
            type: "PUT",
            dataType: "json"
        }).done(function(data) {
            var connected = $("#pair_connected_div"),
                h3 = connected.find("h3");
            h3.html(h3.attr("msg").replace("{DEVICE}", data.deviceName)),
            connected.collapse("show"),
            $("#pair_device_div").collapse("hide"),
            $("#pair_connect_notfound_div").collapse("hide"),
            $("#pair_p").show(),
            $("#pair_device_div").find("ol").show()
        }).fail(function(span) {
            var div;
            404 == span.status ? ((span = (div = $("#pair_connect_notfound_div")).find("span")).html(span.attr("msg").replace("{CODE}", $("#pair_code").val())), div.collapse("show"), $("#pair_p").hide(), $("#pair_device_div").find("ol").hide()) : $("#pair_connect_error").show()
        })
    }),
    this.bodyWrapper.on("keyup", "#pair_code", function() {
        5 == $(this).val().length ? $("#pair_btn").attr("disabled", !1) : $("#pair_btn").attr("disabled", !0)
    }),
    this.bodyWrapper.on("click", ".connect__devices__disconnect", function() {
        var ajaxURL = "/json/pair?deviceId=" + $(this).attr("deviceId");
        console.log("Detach: " + ajaxURL);
        var deviceLI = $(this).parent();
        $.ajax({
            url: ajaxURL,
            type: "DELETE",
            dataType: "json"
        }).done(function(data) {
            deviceLI.hide()
        }).fail(function(data) {
            alert("Internal server error. Please try again.")
        })
    }),
    this.bodyWrapper.on("change", "#favorites_sort_genres", function() {
        1 == this.checked ? $("#favorites_tags").collapse("show") : $("#favorites_tags").collapse("hide")
    }),
    this.bodyWrapper.on("click", ".cnt-track-group", function() {
        $(this).parent().find("a").each(function() {
            var title,
                img = $(this).attr("imgsrc");
            img && (title = $(this).text(), img = $("<img />", {
                src: img,
                alt: title,
                title: title
            }), $(this).html(img.prop("outerHTML") + title), $(this).removeAttr("imgsrc"))
        })
    }),
    this.initFavoritesSortable = function(sortingUL) {
        new Sortable(sortingUL, {
            animation: 150,
            onUpdate: Radiobox.saveSorting
        })
    },
    this.sortableLoaded = !1,
    this.favoritesSortingInit = function() {
        var sortingUL,
            script;
        !window._SortableUrl || (sortingUL = document.getElementById("stations-to-sort")) && (Radiobox.sortableLoaded ? Radiobox.initFavoritesSortable(sortingUL) : ((script = document.createElement("script")).src = window._SortableUrl, document.head.appendChild(script), script.onload = function() {
            Radiobox.sortableLoaded = !0,
            Radiobox.initFavoritesSortable(sortingUL)
        }))
    },
    this.saveSorting = function() {
        var sorting = {};
        $(".dragable li.stations__station").each(function(index, el) {
            sorting[$(el).attr("radioID")] = index + 1
        }),
        $.ajax({
            method: "post",
            url: "/favorites/sort/",
            data: sorting
        }).done(function(data) {
            $("#sorting_help").hide(),
            $("#sorting_back").show()
        })
    },
    this.bodyWrapper.on("click", ".sortButton", function() {
        var tmpCurrent = $(".dragable li.stations__station"),
            currentRadioEl = $(this).parent("li.stations__station"),
            elToSwap = tmpCurrent.length,
            tmpToSwap = currentRadioEl.index();
        (tmpToSwap = $(this).hasClass("b-up") ? tmpToSwap - 1 : tmpToSwap + 1) < 0 ? tmpToSwap = elToSwap - 1 : elToSwap - 1 < tmpToSwap && (tmpToSwap = 0);
        elToSwap = tmpCurrent.eq(tmpToSwap),
        tmpCurrent = currentRadioEl.clone(),
        tmpToSwap = elToSwap.clone();
        elToSwap.replaceWith(tmpCurrent),
        currentRadioEl.replaceWith(tmpToSwap),
        Radiobox.saveSorting()
    }),
    this.bindClocks = function() {
        clearInterval(Radiobox.clockInteval),
        Radiobox.clocks = [],
        Radiobox.lastClocks = {},
        $(".DP").each(function() {
            var hours,
                mins,
                weekday,
                month,
                ampm;
            $(this).attr("bindID") || (hours = $(this).find(".dp_hour"), mins = $(this).find(".dp_minute"), weekday = $(this).find(".dp_weekday"), month = $(this).find(".dp_month"), ampm = $(this).find("._ampm"), Radiobox.clocks.push({
                obj: $(this),
                loc: $(this).attr("loc"),
                hours: hours,
                mins: mins,
                ampm: ampm,
                weekday: weekday,
                month: month
            }), $(this).attr("bindID", Radiobox.clocks.length))
        }),
        Radiobox.clocks.length && (Radiobox.updateClocks(), Radiobox.clockInteval = setInterval(Radiobox.updateClocks, 1e3))
    },
    this.updateClocks = function() {
        if (Radiobox.clocks && Radiobox.clocks.length)
            for (var now = moment(), i = 0; i < Radiobox.clocks.length; i++) {
                var clock = Radiobox.clocks[i],
                    nowInLoc = now;
                clock.loc && (nowInLoc = now.tz(clock.loc));
                var lastInLoc = Radiobox.lastClocks[i] || nowInLoc,
                    lastMins = lastInLoc.hours(),
                    nowMins = nowInLoc.hours(),
                    nowAmpm = "am";
                clock.ampm && clock.ampm.length && (12 <= nowMins && 0 < nowInLoc.second() && (nowMins -= 12, nowAmpm = "pm"), 0 == nowMins && (nowMins = 12), clock.ampm.text(nowAmpm), 12 <= lastMins && (lastMins -= 12), 0 == lastMins && (lastMins = 12)),
                lastMins !== nowMins && clock.hours.text(("0" + nowMins).slice(-2));
                lastMins = lastInLoc.minutes(),
                nowMins = nowInLoc.minutes();
                lastMins !== nowMins && clock.mins.text(("0" + nowMins).slice(-2)),
                lastInLoc.date() !== nowInLoc.date() && $.ajax({
                    url: window.location.pathname + "?dpwidget=1"
                }).done(function(data) {
                    clock.obj.replaceWith(data),
                    Radiobox.bindClocks()
                }),
                Radiobox.lastClocks[i] = nowInLoc.clone()
            }
    },
    this.detectAmPmFormat = function() {
        var expires = new Date,
            isAmPm = 0;
        (expires.toLocaleTimeString().match(/am|pm/i) || expires.toString().match(/am|pm/i)) && (isAmPm = 1);
        expires = new Date;
        expires.setTime(expires.getTime() + 31104e6),
        document.cookie = "ampm=" + isAmPm + ";path=/;expires=" + expires.toUTCString()
    },
    this.mediaControllChangeProgram = function(program) {
        "mediaSession" in navigator && (navigator.mediaSession.metadata ? navigator.mediaSession.metadata.album = program : navigator.mediaSession.metadata = new MediaMetadata({
            album: program
        }))
    },
    this.mediaControllChangeTrack = function(title, artist) {
        "mediaSession" in navigator && (title = title, artist = artist, navigator.mediaSession.metadata && "" != navigator.mediaSession.metadata.artist ? (navigator.mediaSession.metadata.title = title, navigator.mediaSession.metadata.artist = artist) : navigator.mediaSession.metadata = new MediaMetadata({
            title: title,
            artist: artist
        }))
    },
    this.mediaControll = function() {
        "mediaSession" in navigator && (navigator.mediaSession.setActionHandler("play", function() {
            $("body").find("#b_top_play.b-play").click(),
            navigator.mediaSession.playbackState = "played"
        }), navigator.mediaSession.setActionHandler("pause", function() {
            $("body").find("#b_top_play.b-stop").click(),
            navigator.mediaSession.playbackState = "paused"
        }), navigator.mediaSession.setActionHandler("previoustrack", function() {
            $("#top_player_bwd").click()
        }), navigator.mediaSession.setActionHandler("nexttrack", function() {
            $("#top_player_fwd").click()
        }))
    },
    this.initializeAsideScroll = function() {
        if (Radiobox.aside = $(".page__column-right"), !Radiobox.aside || Radiobox.isMobile || window.noads)
            Radiobox.aside = null;
        else {
            if (Radiobox.asideBottomPadding = 25 + $(".player").height(), Radiobox.asideBottomPadding + Radiobox.aside.height() >= $(".page").height())
                return Radiobox.aside = null;
            Radiobox.lastCurScroll = $(window).scrollTop(),
            Radiobox.aside.css({
                position: "sticky"
            }),
            Radiobox.handleAsideScroll()
        }
    };
    this.handleAsideScroll = function() {
        var curScroll,
            stopScroll,
            asideTop,
            top;
        Radiobox.aside && (curScroll = $(window).scrollTop(), stopScroll = $(window).height() - Radiobox.aside.height() - Radiobox.asideBottomPadding, asideTop = parseInt(Radiobox.aside.css("top").replace("px", "")), top = 0, curScroll > Radiobox.lastCurScroll ? top = stopScroll < asideTop ? asideTop + Radiobox.lastCurScroll - curScroll : stopScroll : asideTop < 0 ? top = asideTop + Radiobox.lastCurScroll - curScroll : 0 <= asideTop && 0 != asideTop && (top = 0), Radiobox.aside.css({
            top: top
        }), Radiobox.lastCurScroll = curScroll)
    },
    $(window).scroll(function() {
        Radiobox.handleAsideScroll()
    })
}
function isFacebookBrowser() {
    var ua = navigator.userAgent || navigator.vendor;
    return -1 < ua.indexOf("FBAN") || -1 < ua.indexOf("FBAV")
}
function SetCookie(opts) {
    var expireDays = opts.expire_days || 365,
        path = opts.path || "/",
        expires = new Date;
    expires.setDate(expires.getDate() + expireDays),
    document.cookie = opts.name + "=" + opts.value + ";path=" + path + ";expires=" + expires.toUTCString()
}
$(function() {
    var history,
        pushState,
        $webcamContainer,
        webcamActivated;
    console.log("ready!"),
    window.Radiobox = new Radiobox,
    window.Radiobox.checkTimeZoneSync(),
    window.history && (window.history.pushState({
        state: "changePage",
        data: Radiobox.bodyWrapper.html()
    }, document.title, document.URL), history = window.history, pushState = history.pushState, history.pushState = function(state) {
        var res = pushState.apply(history, arguments);
        return Radiobox.historyStateChange(state), res
    }, window.onpopstate = function(event) {
        event.state && Radiobox.historyStateChange(event.state)
    }),
    window.setInterval(function() {
        window.Radiobox.updateNowPlaying()
    }, 12e4),
    -1 != location.href.indexOf("/webcam") && ($webcamContainer = $("div.video--webcam"), webcamActivated = !1, Radiobox.topPlayer.on("play", function() {
        webcamActivated || (Radiobox.activateWebcam($webcamContainer), webcamActivated = !0)
    }), setTimeout(function() {
        webcamActivated || (Radiobox.activateWebcam($webcamContainer), webcamActivated = !0)
    }, 1e3), Radiobox.bodyWrapper.on("changePage", function() {
        Radiobox.stopWebcam($webcamContainer)
    })),
    Radiobox.favoritesSortingInit(),
    Radiobox.bindClocks(),
    Radiobox.bodyWrapper.on("changePage", function() {
        Radiobox.bindClocks(),
        Radiobox.favoritesSortingInit(),
        Radiobox.initializeAsideScroll()
    }),
    Radiobox.initializeAsideScroll(),
    Radiobox.renderConnectedDevicesDate(),
    Radiobox.checkShowQuote(),
    Radiobox.detectAmPmFormat(),
    Radiobox.mediaControll()
});
